#!/bin/bash

# String of options we accept
OPTSTRING="htvV:?"

# Some colors for output
RED='\033[0;31m'
NO_COLOR='\033[0m'
GREEN='\033[0;32m'
PURPLE='\033[0;35m'

# Base directory for Slurm
APP="/apps/slurm"

### Functions ###

# verbosity() outputText
#
# A unified way to toggle verbose output.
# Text only gets outputted if the VERBOSE flag is set
# to "true".
# @param outputText - Text that will be printed.
function verbosity
{ 
  if [ "$VERBOSE" = "true" ]; then
    echo -e $1
  fi
}

# usage()
#
# Shows the proper usage of this script
function usage
{
  echo "Slurm Compile"
  echo "You must run this as the slurm user on a DBD host"
  echo "-t           -> Specifies if we are compiling for test instead of production if specified"
  echo "-h           -> Displays this help message"
  echo "-V \$VERSION -> Specifies the version to download & compile"
  echo "-?           -> Displays this help message"
  echo "-v           -> Triggers Verbose output"
}

# sanity()
# 
# Checks a few items that should be true before we even continue
# Currently checks to make sure we are the slurm user and that we are running on a DBD host
function sanity
{
  # Must be the slurm user
  verbosity "Checking if slurm user"
  if [ "$(whoami)" != "slurm" ]; then
      echo -e "${RED}You must be the Slurm user to run this${NO_COLOR}"
      echo -e "${RED}You are currently: $(whoami)${NO_COLOR}"
      exit 2
  else
      verbosity "${GREEN}You are indeed the Slurm user${NO_COLOR}"
  fi

  # Must be on a DBD host to properly compile DB libraries
  verbosity "Checking host"
  if [[ $HOSTNAME == *"slurm"* ]]; then
      verbosity "${GREEN}You are indeed on a Database host${NO_COLOR}"
      new_version
  else
      echo -e "${RED}You must run this on a Slurmhost in order to do this properly${NO_COLOR}"
      exit 3
  fi
}

function new_version
{
  MANAGED_LINKS="ctld d dbd default"

  # Establish if we're doing this to test or not
  if [ $TEST ]; then
      WORKING_DIR="${APP}/test"
  else
      echo -e "We will be installing a ${RED}PRODUCTION${NO_COLOR} version"
      WORKING_DIR="${APP}"
  fi

  cd $WORKING_DIR
  rm ${MANAGED_LINKS}
  for link in ${MANAGED_LINKS}
  do 
    ln -s ${VERSION} $link
  done
  exit 0
}

## END FUNCTIONS ##

while getopts "$OPTSTRING" OPTION; do
  case $OPTION in
    v)
      # We want verbose output, and want to know this in the beginning"
      VERBOSE="true"
      ;;
  esac
done

OPTIND=1

while getopts "$OPTSTRING" OPTION; do
  # Now that we know whether or not we want verbosity, we can then loop through the rest of the options.
  case $OPTION in
    h)
      usage
      exit 1
      ;;
    t)
      required_flag=true
      TEST=0
      echo -e "We will be installing a ${GREEN}TEST${NO_COLOR} version"
      ;;
    \?)
      usage
      exit 1
      ;;
    V)
      required_flag=true
      VERSION=$OPTARG
      echo -e "The Slurm version we will be installing is${PURPLE} $VERSION ${NO_COLOR}"
      sanity
      ;;
    *)
      echo -e "${RED}Incorrect Option${NO_COLOR}"
      usage
      exit 1
      ;;
  esac
done

shift $(($OPTIND -1))

if ! $required_flag
then
    echo -e ${RED}"You must either specify a version to install (-V VERSION) and whether or not this is test (-t)${NO_COLOR}" >&2
    exit 1
fi